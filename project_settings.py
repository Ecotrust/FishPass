"""
Django settings for marineplanner project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""


import os
from collections import OrderedDict

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

ASSETS_DIR = os.path.realpath(os.path.join(BASE_DIR, '..', 'assets'))
STYLES_DIR = os.path.realpath(os.path.join(ASSETS_DIR, 'styles'))

OPTIPASS_PROGRAM = os.path.realpath(os.path.join(BASE_DIR, '..', 'apps', 'FishPass', 'OptiPass', 'OptiPassMain.out'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-u*-d*&7j=c7a7&k5u6e61b4-t=d8ce^2k=jhox#cn8iy8m_%d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost']


# Application definition

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'marineplanner.urls'

LOGIN_REDIRECT_URL = '/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marineplanner.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'NAME': 'marineplanner',
        'USER': 'postgres',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = (
    STYLES_DIR,
)

### Django compressor (mp-visualize/base.html)
COMPRESS_ENABLED = True
COMPRESS_URL = STATIC_URL
COMPRESS_URL_PLACEHOLDER = COMPRESS_URL
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_OUTPUT_DIR = 'CACHE'
COMPRESS_STORAGE = 'compressor.storage.CompressorFileStorage'
COMPRESS_VERBOSE = False
COMPRESS_PARSER = 'compressor.parser.AutoSelectParser'
COMPRESS_DEBUG_TOGGLE = 'None'

COMPRESS_JS_COMPRESSOR = 'compressor.js.JsCompressor'
COMPRESS_JS_FILTERS = ['compressor.filters.jsmin.JSMinFilter']

COMPRESS_CSS_COMPRESSOR = 'compressor.css.CssCompressor'
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter'
]
COMPRESS_CSS_HASHING_METHOD = 'mtime'
COMPRESS_MTIME_DELAY = 10

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
    ('text/x-sass', 'django_libsass.SassCompiler'),
    ('text/less', 'lessc {infile} {outfile}'),
)
COMPRESS_CACHEABLE_PRECOMPILERS = ()

COMPRESS_CACHE_KEY_FUNCTION = 'compressor.cache.simple_cachekey'
COMPRESS_CACHE_BACKEND = 'default'

COMPRESS_OFFLINE = True
COMPRESS_OFFLINE_CONTEXT = {}
COMPRESS_OFFLINE_MANIFEST = 'manifest.json'

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
    'compressor.finders.CompressorFinder',
]

### Note: This MUST be set before importing project_settings, even though
#       INSTALLED_APPS is the first thing project_settings sets.
#       Because... django? ¯\_(?)_/¯
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.gis',
    'django.contrib.flatpages',
    'django.contrib.humanize',
    'marineplanner',
    'core',
    'compressor',
    'captcha',
    # 'celery',
    'django_celery_results',
    'import_export',
    'social.apps.django_app.default',
    'social_django',
    ### BEGIN INSERTED INSTALLED APPS ###
    'fishpass',
    'features',
    'manipulators',
    'accounts',
    'visualize',
    'nursery',
    'rpc4django',
    'analysistools',
    'scenarios',
    ### END INSERTED INSTALLED APPS ###
    'ckeditor',
    'flatblocks',
]

CELERY_RESULT_BACKEND = 'django-db'

# GET_SCENARIOS_URL = '/get_scenarios'
# SCENARIO_FORM_URL = '/features/scenario/form/'
# SCENARIO_LINK_BASE = '/features/scenario/app_scenario'

MAP_TECH = 'ol4'
# Set below in fishpass.local_settings.py
MAPBOX_ACCESS_TOKEN=None
HERE_API_TOKEN=None
HERE_APP_CODE=None

########################################
######        LAYER DATA        ########
########################################
# FOCUS_AREA_TYPES = ['HUC08', 'HUC10', 'HUC12', 'County', 'Region', 'State']
FOCUS_AREA_TYPES = OrderedDict({})
FOCUS_AREA_TYPES['HUC02'] = 'HUC2'
FOCUS_AREA_TYPES['HUC04'] = 'HUC4'
FOCUS_AREA_TYPES['HUC06'] = 'HUC6'
FOCUS_AREA_TYPES['HUC08'] = 'HUC8'
FOCUS_AREA_TYPES['HUC10'] = 'HUC10'
FOCUS_AREA_TYPES['HUC12'] = 'HUC12'
FOCUS_AREA_TYPES['Boundary'] = 'FISHPass boundary'
FOCUS_AREA_TYPES['County'] = 'Counties'
FOCUS_AREA_TYPES['Region'] = 'FISHPass Regions'
FOCUS_AREA_TYPES['Coho'] = 'Coho ESU'
FOCUS_AREA_TYPES['Chinook'] = 'Chinook ESUs: all other ESUs'
FOCUS_AREA_TYPES['Chinook_Spring'] = 'Chinook ESUs: Central Valley Spring run'
FOCUS_AREA_TYPES['Chinook_Fall'] = 'Chinook ESUs: Central Valley Fall run'
FOCUS_AREA_TYPES['Steelhead'] = 'Steelhead DPS'

FOCUS_AREA_FIELD_ID_LOOKUP = {
    'HUC02': 'HUC2',
    'HUC04': 'HUC4',
    'HUC06': 'HUC6',
    'HUC08': 'HUC8',
    'HUC10': 'HUC10',
    'HUC12': 'HUC12',
    'County': 'CNTYIDFP',
    'Region': 'OBJECTID',
    'Boundary': 'ORIG_FID',
    'Coho': 'OBJECTID',
    'Chinook': 'OBJECTID',
    'Chinook_Spring': 'OBJECTID',
    'Chinook_Fall': 'OBJECTID',
    'Steelhead': 'OBJECTID',
    'ProtectedAreas': 'region_id',
    # 'State': 'state_id',
}

DEFAULT_FOCUS_AREA_TYPE = 'HUC_8'

# Used for reading the name from the shapefile on import to FocusArea reords in DB
FOCUS_AREA_TYPE_NAME_LOOKUP = {
    'HUC02': 'Name',
    'HUC04': 'Name',
    'HUC06': 'Name',
    'HUC08': 'Name',
    'HUC10': 'Name',
    'HUC12': 'Name',
    'County': 'NAME',
    'Region': 'Region_Lon',
    'Boundary': 'ORIG_FID',
    'Coho': 'ESU_DPS',
    'Chinook': 'ESU_DPS',
    'Chinook_Spring': 'ESU_DPS',
    'Chinook_Fall': 'ESU_DPS',
    'Steelhead': 'ESU_DPS',
    'ProtectedAreas': 'region_id',
    # 'State': 'huc8_name',
}

# Points to field on Barrier Record in database that gives name of watershed
BARRIER_WATERSHED_NAME_LOOKUP = {
    'HUC02': 'huc8_name',
    'HUC04': 'huc8_name',
    'HUC06': 'huc8_name',
    'HUC08': 'huc8_name',
    'HUC10': 'huc10_name',
    'HUC12': 'huc12_name',
    'County': 'county',
    'Region': 'huc8_name',
    'Boundary': 'huc8_name',
    'Coho': 'ESU_COHO',
    'Chinook': 'ESU_CHIN',
    'Chinook_Spring': 'huc8_name',
    'Chinook_Fall': 'huc8_name',
    'Steelhead': 'ESU_STEEL',
    'ProtectedAreas': 'huc8_name',
    # 'State': 'huc8_name',
}

# Used for reporting the most specific identifier for the filtered Focus Areas
FOCUS_AREA_TYPE_NAME_LOOKUP = {
    'HUC02': 'unit_id',
    'HUC04': 'unit_id',
    'HUC06': 'unit_id',
    'HUC08': 'unit_id',
    'HUC10': 'unit_id',
    'HUC12': 'unit_id',
    'County': 'description',
    'Region': 'description',
    'Boundary': 'description',
    'Coho': 'description',
    'Chinook': 'description',
    'Chinook_Spring': 'description',
    'Chinook_Fall': 'description',
    'Steelhead': 'description',
    'ProtectedAreas': 'description',
    # 'State': 'description',
}

# This is only used for importing the PAD. Geometry_DB_SRID is used for import FocusAreas
IMPORT_SRID = 4326

# Setting internal DB SRID to an Equal Area projection would allow us to natively calculate area.
# For now mercator is just easier.
GEOMETRY_DB_SRID = 3857

#######################
# PAD IMPORT SETTINGS #
#######################
OWNERSHIP_LOOKUP = OrderedDict({})
OWNERSHIP_LOOKUP['99'] = 'Unknown'
OWNERSHIP_LOOKUP['22'] = 'City'
OWNERSHIP_LOOKUP['16'] = 'College or university'
OWNERSHIP_LOOKUP['7'] = 'Conservation group'
OWNERSHIP_LOOKUP['23'] = 'County'
OWNERSHIP_LOOKUP['4'] = 'Federal agency'
OWNERSHIP_LOOKUP['3'] = 'Local agency'
OWNERSHIP_LOOKUP['18'] = 'Natural Resource Commission'
OWNERSHIP_LOOKUP['17'] = 'Primary or secondary school'
OWNERSHIP_LOOKUP['5'] = 'Private landowner - corporate'
OWNERSHIP_LOOKUP['6'] = 'Private landowner - noncorporate'
OWNERSHIP_LOOKUP['20'] = 'Public utility'
OWNERSHIP_LOOKUP['9'] = 'Soil and water conservation district'
OWNERSHIP_LOOKUP['10'] = 'Sporting group'
OWNERSHIP_LOOKUP['2'] = 'State agency'
OWNERSHIP_LOOKUP['12'] = 'Tribe or tribal organization'
OWNERSHIP_LOOKUP['28'] = 'Multiple/mixed'
OWNERSHIP_LOOKUP['98'] = 'NA'
OWNERSHIP_LOOKUP['8'] = 'Other'

OWNERSHIP_DEFAULT = '99'

FISH_PASSAGE_BIOS_LAYER = 'ds69'
BIOS_URL = 'https://apps.wildlife.ca.gov/bios/?al=ds69&col=pad_id&val='

GET_SCENARIOS_URL = '/fishpass/get_scenarios/Project/'
SCENARIO_FORM_URL = '/features/project/form/'

DS_TREATMENT_CHOICES = [
    ('adjust','Adjustable'),
    ('consider','Non-adjustable'),
    ('ignore','Excluded'),
]

ACTION_CHOICES = [
    ('consider', 'Free'),
    ('include', 'Force-In'),
    ('exclude', 'Force-Out')
]

PYTHON_USER_GROUP = 'adm'

MEDIA_ROOT = os.path.realpath(os.path.join(BASE_DIR, '..', 'apps', 'FishPass', 'fishpass', 'media'))
# CSV_BASE_DIR = '/tmp'
CSV_BASE_DIR = MEDIA_ROOT
CSV_REPORTS_DIR = os.path.join(MEDIA_ROOT, 'reports')

DEFAULT_DISPLAY_HEADERS = ['Site Name', 'PAD ID', 'View in BIOS', 'Action', 'Estimated Cost', ]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000

try:
    ### START MODULE SETTINGS IMPORT ###
    from features.settings import *
    from scenarios.settings import *
    from accounts.settings import *
    from visualize.settings import *
    ### END MODULE SETTINGS IMPORT ###
except ImportError:
    pass

# Visualize Overrides

SEARCH_DISABLED = True

# Data-Manager Overrides (needed for Flatpages, not provided since data-manager was dropped)
SITE_ID = 1


# Accounts Overrides
ADMIN_URL = "/admin"
CMS_ADMIN_BUTTON = False
RECAPTCHA_PUBLIC_KEY = 'SiteKey'
RECAPTCHA_PRIVATE_KEY = 'SetInLocalSettings'

# ACCOUNTS_TEMPLATES['index'] = 'accounts/index.html'
# ACCOUNTS_TEMPLATES['login'] = 'accounts/login.html'
# ACCOUNTS_TEMPLATES['user_detail_form'] = 'accounts/user_detail_form.html'
# ACCOUNTS_TEMPLATES['change_password_form'] = 'accounts/change_password_form.html'
# ACCOUNTS_TEMPLATES['registration_error'] = 'accounts/registration_error.html'
# ACCOUNTS_TEMPLATES['success'] = 'accounts/success.html'
# ACCOUNTS_TEMPLATES['register'] = 'accounts/register.html'
# ACCOUNTS_TEMPLATES['check_your_email'] = 'accounts/check_your_email.html'
# ACCOUNTS_TEMPLATES['social_confirm'] = 'accounts/social_confirm.html'
# ACCOUNTS_TEMPLATES['verify_email_txt'] = 'accounts/mail/verify_email.txt'
# ACCOUNTS_TEMPLATES['verify_email_html'] = 'accounts/mail/verify_email.html'
# ACCOUNTS_TEMPLATES['verify_email_success'] = 'accounts/verify_email_success.html'
# ACCOUNTS_TEMPLATES['debug'] = 'accounts/debug.html'
# ACCOUNTS_TEMPLATES['wait_for_email'] = 'accounts/wait_for_email.html'
# ACCOUNTS_TEMPLATES['forgot'] = 'accounts/forgot/forgot.html'
# ACCOUNTS_TEMPLATES['reset_successful'] = 'accounts/forgot/reset_successful.html'
# ACCOUNTS_TEMPLATES['reset'] = 'accounts/forgot/reset.html'

try:
    from marineplanner.local_settings import *
except ImportError:
    pass

try:
    from fishpass.local_settings import *
except ImportError:
    pass

# This seems to help with some backward compatibility
import django
django.setup()
