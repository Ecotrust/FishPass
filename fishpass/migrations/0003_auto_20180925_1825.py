# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-09-26 01:25
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('fishpass', '0002_auto_20180925_1446'),
    ]

    operations = [
        migrations.CreateModel(
            name='BarrierCost',
            fields=[
                ('pad_id', models.IntegerField(primary_key=True, serialize=False)),
                ('cost', models.IntegerField(validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioBarrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pre_pass', models.FloatField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Pre-Passability')),
                ('post_pass', models.FloatField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Post-Passability')),
                ('cost', models.FloatField(blank=True, default=None, null=True, verbose_name='Estimated cost to mitigate')),
                ('barrier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishpass.Barrier')),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioBarrierStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_pre_passability', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Pre-passability')),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioBarrierType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_cost', models.FloatField(blank=True, null=True, verbose_name='Default Cost of Mitigation')),
                ('default_post_passability', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Post-passability')),
                ('fixable', models.BooleanField(default=True)),
                ('barrier_specific', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='barrierstatus',
            name='order',
            field=models.IntegerField(default=999),
        ),
        migrations.AddField(
            model_name='barriertype',
            name='barrier_specific',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='barriertype',
            name='fixable',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='barriertype',
            name='order',
            field=models.IntegerField(default=999),
        ),
        migrations.AddField(
            model_name='ownershiptype',
            name='order',
            field=models.IntegerField(default=999),
        ),
        migrations.AddField(
            model_name='project',
            name='assign_cost',
            field=models.BooleanField(default=True, help_text='Consider the unique cost of mitigating each barrier by $', verbose_name='Assign Barrier Costs'),
        ),
        migrations.AddField(
            model_name='project',
            name='batch_increment',
            field=models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='project',
            name='budget',
            field=models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='project',
            name='budget_type',
            field=models.CharField(default='budget', max_length=40, verbose_name='Fixed Budget or Range'),
        ),
        migrations.AddField(
            model_name='project',
            name='focus_region',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='fishpass.FocusArea'),
        ),
        migrations.AddField(
            model_name='project',
            name='max_budget',
            field=models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='project',
            name='min_budget',
            field=models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='project',
            name='ownership_input',
            field=models.CharField(blank=True, choices=[('99', 'Unknown'), ('22', 'City'), ('16', 'College or university'), ('7', 'Conservation group'), ('23', 'County'), ('4', 'Federal agency'), ('3', 'Local agency'), ('18', 'Natural Resource Commission'), ('17', 'Primary or secondary school'), ('5', 'Private landowner - corporate'), ('6', 'Private landowner - noncorporate'), ('20', 'Public utility'), ('9', 'Soil and water conservation district'), ('10', 'Sporting group'), ('2', 'State agency'), ('12', 'Tribe or tribal organization'), ('28', 'Multiple/mixed'), ('98', 'NA'), ('8', 'Other')], default=None, max_length=150, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='target_area',
            field=django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857, verbose_name='Target Area'),
        ),
        migrations.AddField(
            model_name='project',
            name='treat_downstream',
            field=models.CharField(choices=[('adjust', 'Adjustable'), ('consider', 'Non-adjustable'), ('ignore', 'Excluded')], default='consider', max_length=30),
        ),
        migrations.AlterField(
            model_name='barriertype',
            name='default_post_passability',
            field=models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Post-passability'),
        ),
        migrations.AddField(
            model_name='scenariobarriertype',
            name='barrier_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishpass.BarrierType'),
        ),
        migrations.AddField(
            model_name='scenariobarriertype',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishpass.Project'),
        ),
        migrations.AddField(
            model_name='scenariobarrierstatus',
            name='barrier_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishpass.BarrierStatus'),
        ),
        migrations.AddField(
            model_name='scenariobarrierstatus',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishpass.Project'),
        ),
        migrations.AddField(
            model_name='scenariobarrier',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishpass.Project'),
        ),
    ]
